<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="papii22-suite.xml" />
	<munit:test name="papii2Flow-test1" doc:id="41b9f682-3f0b-4fb7-9fa2-06158d818764" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Read" doc:id="bf313530-49a9-43d2-a478-44aebaaddbb3" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="1f3ea1dc-6dc0-43c8-9c15-7487a089674d" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/csv  --- readUrl('classpath://papii2Flowtest1\mock_payload3.dwl')]" mediaType="text/csv " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://papii2Flowtest1\mock_attributes3.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Read" doc:id="e771fa04-2bfb-451e-8ed2-0c55efcb5130" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="31f2e063-11c0-4c23-b826-05a846abb865" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/csv  --- readUrl('classpath://papii2Flowtest1\mock_payload4.dwl')]" mediaType="text/csv " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://papii2Flowtest1\mock_attributes4.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Read1" doc:id="1bb8fa97-f17b-45b2-a160-5d2e0ff7ce5d" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="03f601e7-6c9c-460c-aa27-f74d835749bc" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/csv  --- readUrl('classpath://papii2Flowtest1\mock_payload5.dwl')]" mediaType="text/csv " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://papii2Flowtest1\mock_attributes5.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="15b42f22-0bab-41fb-958c-554c4b1ab47f" >
				<munit:payload value="#[readUrl('classpath://papii2Flowtest1\set-event_payload1.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to papii2Flow" doc:id="56ff845f-0632-498b-b0e6-45ed21e3b26f" name="papii2Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="7863ca6b-8e8c-4c2b-befe-2a8052d759d4" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import papii2Flowtest1::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
