<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="papii2-suite.xml" />
	<flow name="mock-db:update" doc:id="81cf0ac4-6037-4ec7-aa4c-18e7b6c38c41" >
		<try doc:name="Try" doc:id="80e2075b-ee1a-4b4c-855c-2d7540227e5b" >
			<munit-tools:retrieve doc:name="Retrieve" doc:id="6b6fa328-7a11-4414-af99-6f9a5bc7740e" key="Mock Update"/>
			<error-handler >
				<on-error-continue enableNotifications="false" logException="false" doc:name="On Error Continue" doc:id="b7c7ee30-48f9-4e83-991e-f6232b200cf3" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload" doc:id="dd5a632b-1e3f-412f-85d4-3a40543b1b69" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store" doc:id="1e49fcd9-62d5-423d-9907-8943a31d8197" key="Mock Update">
			<munit-tools:value ><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice" doc:id="5b7fbed1-8724-4e4b-97ea-dd0cbf6385d0" >
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event" doc:id="330134e0-68f6-4c7f-9e88-8171679503b1" >
					<munit:payload value="#[output application/java  --- readUrl('classpath://DBtest\mock_payload5.dwl')]" encoding="UTF-8" mediaType="application/java " />
					<munit:variables >
						<munit:variable key="rootMessage" value="#[readUrl('classpath://DBtest\mock_variable_10.dwl')]" />
						<munit:variable key="counter" value="#[readUrl('classpath://DBtest\mock_variable_11.dwl')]" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event" doc:id="c058632d-c24a-4616-92fb-20fae8cd6831" >
					<munit:payload value="#[output application/java  --- readUrl('classpath://DBtest\mock_payload6.dwl')]" encoding="UTF-8" mediaType="application/java " />
					<munit:variables >
						<munit:variable key="rootMessage" value="#[readUrl('classpath://DBtest\mock_variable_12.dwl')]" />
						<munit:variable key="counter" value="#[readUrl('classpath://DBtest\mock_variable_13.dwl')]" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 3]">
				<munit:set-event doc:name="Set Event" doc:id="eb0fc74d-6ada-48f2-8c3b-f5bfd24479ca" >
					<munit:payload value="#[output application/java  --- readUrl('classpath://DBtest\mock_payload7.dwl')]" encoding="UTF-8" mediaType="application/java " />
					<munit:variables >
						<munit:variable key="rootMessage" value="#[readUrl('classpath://DBtest\mock_variable_14.dwl')]" />
						<munit:variable key="counter" value="#[readUrl('classpath://DBtest\mock_variable_15.dwl')]" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 4]">
				<munit:set-event doc:name="Set Event" doc:id="7dd74ecf-07d5-449f-8688-214dfc6f2774" >
					<munit:payload value="#[output application/java  --- readUrl('classpath://DBtest\mock_payload8.dwl')]" encoding="UTF-8" mediaType="application/java " />
					<munit:variables >
						<munit:variable key="rootMessage" value="#[readUrl('classpath://DBtest\mock_variable_16.dwl')]" />
						<munit:variable key="counter" value="#[readUrl('classpath://DBtest\mock_variable_17.dwl')]" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 5]">
				<munit:set-event doc:name="Set Event" doc:id="8bf5e7ae-8aed-458c-97bd-fdd6ae2dbfba" >
					<munit:payload value="#[output application/java  --- readUrl('classpath://DBtest\mock_payload9.dwl')]" encoding="UTF-8" mediaType="application/java " />
					<munit:variables >
						<munit:variable key="rootMessage" value="#[readUrl('classpath://DBtest\mock_variable_18.dwl')]" />
						<munit:variable key="counter" value="#[readUrl('classpath://DBtest\mock_variable_19.dwl')]" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise >
				<munit-tools:fail doc:name="Fail" doc:id="4756d638-682a-41ad-90ac-60814e474ff3" message="There are no more events to mock"/>
			</otherwise>
		</choice>
	</flow>
	<munit:test name="DB-test" doc:id="80e1fd3f-c9ab-49fe-817d-592ccecd9a31" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Update" doc:id="d6ceebce-2dbb-4feb-a624-4102105f3e22" processor="db:update">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d13094b3-581c-4a3a-94bf-2f19ccd6f0fb" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="mock-db:update" />
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="60b7b63e-c688-4d89-9d5e-ad4cda1fb0d1" >
				<munit:payload value="#[output text/csv  --- readUrl('classpath://DBtest\set-event_payload1.dwl')]" encoding="UTF-8" mediaType="text/csv " />
				<munit:attributes value="#[readUrl('classpath://DBtest\set-event_attributes1.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to DB" doc:id="e4503fe8-4526-4d94-941f-f81c0c6ac544" name="DB"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="264e709b-268f-4c99-9e42-4eaf79348e24" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import DBtest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="papii2Flow-test" doc:id="37153cd7-e3e2-4fcc-98cb-0a583556fe91" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Read" doc:id="aac49c06-5078-4dc0-b551-7f5a49625a89" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="1f3ea1dc-6dc0-43c8-9c15-7487a089674d" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/csv  --- readUrl('classpath://papii2Flowtest\mock_payload6.dwl')]" mediaType="text/csv " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://papii2Flowtest\mock_attributes6.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Read" doc:id="ee44c9f7-c167-4873-8a2c-e2e9c9a1f4ef" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="31f2e063-11c0-4c23-b826-05a846abb865" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/csv  --- readUrl('classpath://papii2Flowtest\mock_payload7.dwl')]" mediaType="text/csv " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://papii2Flowtest\mock_attributes7.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Read1" doc:id="3cb7febd-df71-4d66-a006-e8a12251e4b8" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="03f601e7-6c9c-460c-aa27-f74d835749bc" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/csv  --- readUrl('classpath://papii2Flowtest\mock_payload8.dwl')]" mediaType="text/csv " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://papii2Flowtest\mock_attributes8.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="97b85f94-d3f4-47ed-9ea7-cd9ce6683a8c" >
				<munit:payload value="#[readUrl('classpath://papii2Flowtest\set-event_payload2.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to papii2Flow" doc:id="dea75cb4-1ef1-40a9-9f15-70600045831e" name="papii2Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="1c8df648-54ea-48f8-a2b9-6ef49b4ee15a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import papii2Flowtest::assert_expression_payload2
---
assert_expression_payload2::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="SFTP-test" doc:id="6c793dc9-8061-48a9-b13a-e1480e874349" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Write" doc:id="e3e8554c-688e-4186-ab18-cf3c89b5a5d5" processor="file:write">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="ff0d0f59-2a2b-4cdd-84d2-b3f59eccac1d" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/csv  --- readUrl('classpath://SFTPtest\mock_payload1.dwl')]" mediaType="application/csv " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://SFTPtest\mock_attributes1.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="81250767-a49a-478b-8c7d-7686b4467912" >
				<munit:payload value="#[output text/csv  --- readUrl('classpath://SFTPtest\set-event_payload1.dwl')]" encoding="UTF-8" mediaType="text/csv " />
				<munit:attributes value="#[readUrl('classpath://SFTPtest\set-event_attributes1.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to SFTP" doc:id="c3d3b2be-cf94-44cf-a787-5c6a7cd87687" name="SFTP"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6d47d35f-6455-455a-a6ba-1720812b0691" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import SFTPtest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
