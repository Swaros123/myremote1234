<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="employee-suite.xml" />
	<munit:test name="SFTPData-test2" doc:id="a0c4f4d5-3bfe-48e8-bcfa-3f58a5e1d28f" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Read" doc:id="e5729f41-795c-49fe-be24-562768bb9938" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="322f0444-e823-42fe-8d0f-f64a0bd1dc57" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/csv  --- readUrl('classpath://SFTPDatatest2\mock_payload.dwl')]" mediaType="text/csv " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://SFTPDatatest2\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="f2c94b1f-21d0-40cd-98e9-62ba6dff2e93" >
				<munit:payload value="#[readUrl('classpath://SFTPDatatest2\set-event_payload.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to SFTPData" doc:id="dafa3aaf-15b7-4606-9074-7ae6b61e2af1" name="SFTPData"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="2696e855-7df1-4dec-8abd-0f2c33787dcf" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import SFTPDatatest2::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="SFTPData-test" doc:id="2791875e-4d2c-420f-b744-b19b7d8571fd" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Read" doc:id="fd653ed9-d802-47e3-a6a5-8e955e325097" processor="file:read">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="322f0444-e823-42fe-8d0f-f64a0bd1dc57" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/csv  --- readUrl('classpath://SFTPDatatest\mock_payload.dwl')]" mediaType="text/csv " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://SFTPDatatest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="10a7ddf6-0510-482d-b204-cfa9e458a639" >
				<munit:payload value="#[readUrl('classpath://SFTPDatatest\set-event_payload1.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to SFTPData" doc:id="2537c9d2-311c-4c2c-b2ce-fad562e6e9df" name="SFTPData"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="02325224-8b1e-4fa6-9ce0-c8c3a5508d48" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import SFTPDatatest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
